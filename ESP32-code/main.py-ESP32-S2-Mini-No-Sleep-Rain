
#ESP32 S2 Mini on Power - No sleeping. 

import machine
import network
import urequests
import time

# Set CPU frequency to 80MHz
machine.freq(80000000)

# WiFi credentials
WIFI_SSID = "Severn"
WIFI_PASSWORD = "XXXXXXXXXXXX"
SERVER_URL = "http://severn-data.loddington.com:5000/sensors/bucket_tips/increment"

BUTTON_PIN = 11
RESTART_INTERVAL = 86400  # 24 hours in seconds
MIN_PRESS_DURATION = 1
MAX_PRESS_DURATION = 5000
DEBOUNCE_TIME = 200  # 200ms debounce

# Configure and start the watchdog timer (timeout: 60 seconds)
wdt = machine.WDT(timeout=60000)

# Initialize WiFi interface
wlan = network.WLAN(network.STA_IF)

# Restarts the ESP32 S2 Mini
def restart():
    print("Restarting...")
    machine.reset()

# Connect to WiFi with timeout handling
def connect_wifi():
    wlan.active(True)
    if not wlan.isconnected():
        print("Connecting to WiFi...")
        wlan.connect(WIFI_SSID, WIFI_PASSWORD)
        timeout = 10  # 10 seconds timeout
        start = time.time()
        while not wlan.isconnected():
            if time.time() - start >= timeout:
                print("Failed to connect to WiFi.")
                restart()  # Restart if it fails to connect within the timeout
            time.sleep(0.1)
    print("Connected to WiFi:", wlan.ifconfig())
    # Feed the watchdog timer after successful WiFi connection
    wdt.feed()

# Function to send PUT request
def send_put_request():
    try:
        response = urequests.put(SERVER_URL)
        if response.status_code == 200:
            print("PUT request sent successfully")
        else:
            print("Error sending PUT request. Status code:", response.status_code)
        response.close()
    except Exception as e:
        print("Exception occurred while sending PUT request:", e)
        # Reset the watchdog timer on exception
        wdt.feed()

# Main function
def main():
    connect_wifi()

    button = machine.Pin(BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    button_pressed_time = 0

    start_time = time.time()

    while True:
        # Feed the watchdog timer periodically
        wdt.feed()

        # Reconnect to WiFi if disconnected
        if not wlan.isconnected():
            print("WiFi lost connection, reconnecting...")
            connect_wifi()

        # Restart the ESP32 after 24 hours
        if time.time() - start_time >= RESTART_INTERVAL:
            restart()

        # Button press handling with debounce
        if not button.value():  # Button pressed
            button_pressed_time = time.ticks_ms()
            time.sleep_ms(DEBOUNCE_TIME)  # Debounce delay
            if not button.value():  # Check again after debounce delay
                while not button.value():  # Wait until button is released
                    pass

                button_release_time = time.ticks_ms()
                button_press_duration = button_release_time - button_pressed_time

                if MIN_PRESS_DURATION <= button_press_duration <= MAX_PRESS_DURATION:
                    print("Button pressed for", button_press_duration, "ms")
                    send_put_request()
                elif button_press_duration > MAX_PRESS_DURATION:
                    print("Button press duration exceeds maximum limit")

            time.sleep(0.15)

# Main program
try:
    main()
except Exception as e:
    print("Exception occurred:", e)
    restart()


